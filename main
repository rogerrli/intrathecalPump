//Libraries
#include <SPI.h>
#include <SD.h>
#include <TFT.h>
#include <Time.h>
#include <Bounce.h>


//Define Variables
// ADC_INPUT_PIN = A3 (pin 17)
#define ADC_INPUT_PIN A4
#define ADC_INPUT_PIN2 A6
#define DIGITAL_INPUT_PIN A8
#define MAX_FILENAME_LENGTH 13
#define SAMPLE_PERIOD_uS 10000
#define BUFFER_DEPTH 256
#define TIME_HEADER  "T"  // Header tag for serial time sync message

#define sclk 13  // SCLK can also use pin 14
#define mosi 11  // MOSI can also use pin 7
#define cs   10  // CS & DC can use pins 2, 6, 9, 10, 15, 20, 21, 22, 23
#define dc   9   //  but certain pairs must NOT be used: 2+10, 6+9, 20+23, 21+22
#define rst  8   // RST can use any pin
#define sdcs 4   // CS for SD card, can use any pin

const int buttonPin = 2; 
const int chipSelect = 10;
const int SDdetect = 4;
const int ledPin = 3;
char sensorPrintout[4];
File datalog;
char filename[10];
char filenameBuffer[MAX_FILENAME_LENGTH]; // 8 + 4 + 1(xxxxxxxx.yyy\0)
char timestampBuffer[20];
int temp2 = 0;
int temp = 0;
int CurrHour, CurrMin, CurrSec;
char cmd = ' ';

volatile int16_t adc_res;
volatile int16_t calibration;
volatile int16_t counter;
volatile int numSamplesAcq = 0;
volatile int16_t sampleBuffer_f[BUFFER_DEPTH], sampleBuffer_b[BUFFER_DEPTH];
volatile boolean isBackBuffer = false;
volatile boolean bufferFull = false;
volatile boolean bufferFull_copy = false;

volatile int16_t adc_res2;
volatile int16_t calibration2;
volatile int numSamplesAcq2 = 0;
volatile int16_t sampleBuffer_f2[BUFFER_DEPTH], sampleBuffer_b2[BUFFER_DEPTH];

TFT screen = TFT(cs, dc, rst);

int vol = 0;

void setup() {

  //Initialize IO:
  pinMode(chipSelect, OUTPUT);
  pinMode(ADC_INPUT_PIN, INPUT);
  pinMode(ADC_INPUT_PIN2, INPUT);        
  pinMode(ledPin, OUTPUT);
  pinMode(SDdetect, INPUT_PULLUP);    
  
  calibration = 0;
  calibration2 = 0;
  counter = 0;
  //initialize the screen
  screen.begin();
  //initialize text size
  screen.setTextSize(1);
  //make the background white
  screen.background(255,255,255);
  //set the text color to black
  screen.stroke(0,0,0);

  //write text to the screen in the top left corner
  screen.text("Initializing SD Card...", 0, 0);
  delay(1000);
  screen.stroke(255,255,255);
  screen.text("Initializing SD Card...", 0, 0);
  
  if(!SD.begin(SDdetect)){
    screen.stroke(255,255,255);
    screen.text("Initializing SD Card...", 0, 0);
    screen.stroke(0,0,0);
    screen.text("Card Failed, or not present", 0,0);
    /*
    while(1){
      screen.background(0,0,0);
      screen.stroke(255,255,255);
      screen.text("Card Failed, or not present", 0,0);
      delay(1000);
      screen.background(255,255,255);
      screen.stroke(0,0,0);
      screen.text("Card Failed, or not present", 0,0);
      delay(1000);
    }
    */
  }
  else {
    screen.stroke(0,0,0);
    screen.text("Card Initialized",0,20);
  }
  delay(1000);
  int i = 0;
  String temp = "DATA";
  temp.concat(i);
  temp.concat(".txt");
  filename[temp.length()+1];
  temp.toCharArray(filename, sizeof(filename));
  while (SD.exists(filename)){
    screen.text("while loop", 0, 20);
    i = i + 1;
    temp = "DATA";
    temp.concat(i);
    temp.concat(".txt");
    filename[temp.length()+1];
    temp.toCharArray(filename, sizeof(filename));
  }
  datalog = SD.open(filename, FILE_WRITE);
  screen.text(filename, 0, 40);
  delay(1000);
  datalog.close();
  screen.setTextSize(2);
  screen.stroke(0, 0, 0);

  pinMode(buttonPin, OUTPUT); 
}

void loop(){
  /// reset screen
  screen.background(255, 255, 255);
  
  // blood pressure
  String sensorVal = String(analogRead(10));
  sensorVal.toCharArray(sensorPrintout, 4);
  screen.text("BP:", 1, 1);
  screen.text(sensorPrintout, 41, 1);
  
  //clock
  screen.text("Clock!", 1, 30);
  
  
  delay(2000);
  
  // reset screen
  screen.background(255, 255, 255);
  
  // total volume
  String temp = "";
  temp.concat(vol);
  char text[temp.length() + 1];
  temp.toCharArray(text, sizeof(text));
  screen.text(text, 1, 1);
  vol = vol + 1;
  
  delay(2000);
  
  // write to file
  char label[5] = "BP: ";
  char message[sizeof(label) + sizeof(sensorPrintout)];
  sprintf(message,"%s%s\r\n",label,sensorPrintout);
  
  WriteDataLog(message);
}

void WriteDataLog(char* characters){
  datalog = SD.open(filename, FILE_WRITE);
  datalog.write(characters);
  datalog.close();
}

